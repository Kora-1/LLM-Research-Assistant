import google.generativeai as genai
from config import GEMINI_API_KEY

# Configure the Google Generative AI API with the provided API key
genai.configure(api_key=GEMINI_API_KEY)

# Select the generative model to be used for content generation
selected_model = "gemini-2.0-flash"
model = genai.GenerativeModel(selected_model)

def answer_agent(state):
    """
    Generates a detailed and well-supported answer to a given research query, utilizing provided research summaries.

    This function takes in a dictionary containing a research query and a list of research summaries,
    then constructs a prompt for the AI model to generate a comprehensive response. The model's response
    is based on the provided research summaries, ensuring the answer is well-supported with citations.

    Parameters:
    - state (dict): A dictionary containing:
        - "query" (str): The research question to be answered.
        - "summaries" (list): A list of dictionaries, each containing:
            - "url" (str): The URL of the research source.
            - "summary" (str): A summary of the research.

    Returns:
    - dict: A dictionary containing:
        - "query" (str): The original query passed to the function.
        - "final_answer" (str): The detailed answer generated by the model, based on the provided summaries.

    Example:
    >>> state = {
    >>>     "query": "What are the benefits of AI in healthcare?",
    >>>     "summaries": [
    >>>         {"url": "http://example.com/ai-healthcare", "summary": "AI helps with diagnostics."},
    >>>         {"url": "http://example.com/ai-healthcare-2", "summary": "AI improves patient outcomes."}
    >>>     ]
    >>> }
    >>> result = answer_agent(state)
    >>> print(result["final_answer"])
    """
    # Extract the research query and summaries from the provided state
    query = state["query"]
    summaries = state["summaries"]

    # Format the summaries into a string with source URLs and the content of the summary
    combined_info = "\n\n".join(
        [f"Source: {s['url']}\n{s['summary']}" for s in summaries]
    )

    # Construct the prompt for the generative AI model, requesting a comprehensive answer
    prompt = f"""
    Using the research summaries provided below, craft a comprehensive and well-supported answer to the "{query}"

    Please ensure your response is detailed, incorporates relevant insights from the research, and includes proper citations for all referenced sources.

    Research Summaries:
    {combined_info}

    Include the URLs or sources cited at the end of your answer.
    """

    # Generate the content using the AI model
    response = model.generate_content(prompt)

    # Return the query and the model's generated response
    return {
        "query": query,
        "final_answer": response.text
    }



# def answer_agent(state):
#     query = state["query"]
#     summaries = state["summaries"]
#
#     # Prepare numbered summaries and citation map
#     numbered_summaries = []
#     citations = []
#
#     for idx, item in enumerate(summaries, start=1):
#         numbered_summaries.append(f"Source [{idx}]:\n{item['summary']}")
#         citations.append(f"[{idx}] {item['url']}")
#
#     combined_info = "\n\n".join(numbered_summaries)
#
#     prompt = f"""
# You are a helpful research assistant.
#
# Answer the following question using the summaries below. Use inline citations like [1], [2], etc. at relevant points.
#
# Question: "{query}"
#
# Summaries:
# {combined_info}
# """
#
#     response = model.generate_content(prompt)
#
#     final_output = f"{response.text.strip()}\n\nSources:\n" + "\n".join(citations)
#
#     return {
#         "query": query,
#         "final_answer": final_output
#     }

